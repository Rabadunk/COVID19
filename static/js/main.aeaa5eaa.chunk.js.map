{"version":3,"sources":["img/Title.png","components/Title.js","components/map/Map.js","components/info/InfoCard.js","components/info/Info.js","components/summary/Summary.js","Firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","src","TitleImage","Map","locations","defaultView","latitude","longitude","width","height","zoom","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","useState","viewport","setViewport","mapRef","useRef","points","map","place","type","properties","cluser","placeId","DHB","count","geometry","coordinates","Longitude","Latitude","bounds","current","getMap","getBounds","toArray","flat","useSupercluster","options","radius","maxZoom","clusters","supercluster","mapboxApiAccessToken","process","onViewportChange","minZoom","ref","href","Button","variant","download","onClick","cluster","isCluster","point_count","sum","getLeaves","id","forEach","point","getClusterSum","dimension","length","key","style","expansionZoom","Math","min","getClusterExpansionZoom","InfoCard","cases","location","total","open","setOpen","Card","aria-controls","aria-expanded","Collapse","in","info","Details","Case","Gender","Age","Info","Summary","totals","Confirmed","Recovered","end","Total","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","state","Locations","StaticLocations","Cases","StaticCases","Totals","Firebase","database","once","then","value","setState","val","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aeaa5eaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Title.23336c2c.png\";","import React from 'react'\nimport TitleImage from '../img/Title.png';\nimport { FiAlertTriangle } from 'react-icons/fi'\n\nfunction Title () {\n  return (\n    <div className='Title'>\n      <h1>\n        <img src={TitleImage}/>\n      </h1>\n    </div>\n  )\n}\n\nexport default Title\n","import React, {useState, useRef} from \"react\";\nimport ReactMapGL, { Marker, FlyToInterpolator } from \"react-map-gl\";\nimport './Map.css';\n\n\nimport { MdZoomOutMap } from \"react-icons/md\";\nimport { FaGithub, FaFileDownload} from \"react-icons/fa\";\nimport { GoGraph } from \"react-icons/go\";\nimport { Button } from \"react-bootstrap\";\nimport useSupercluster from \"use-supercluster\";\n\n\nexport default function Map({locations}) {\n    const defaultView = {\n        latitude: -41.51128245580759,\n        longitude: 172.72407079826075,\n        width: '100%',\n        height: '100%',\n        zoom: 4.418,\n        transitionInterpolator: new FlyToInterpolator({\n            speed: 1\n        }),\n        transitionDuration: \"auto\"     \n    }\n\n    const [viewport, setViewport] = useState(defaultView);\n\n    const mapRef = useRef()\n\n\n    // Clustering\n    // Format for clusters\n    const points = locations.map( place => ({\n        type: \"Feature\",\n        properties: {\n            cluser: false,\n            placeId: place.DHB,\n            count: place['Total cases']\n        },\n        geometry: {\n            type: \"Point\",\n            coordinates: [place.Longitude, place.Latitude]\n        }\n    }));\n\n    // Get map bounds\n    const bounds= mapRef.current ? mapRef.current.getMap().getBounds().toArray().flat() : null;\n\n    // Get clusters\n    const {clusters, supercluster} = useSupercluster({\n        points,\n        zoom: viewport.zoom,\n        bounds,\n        options: { radius: 50, maxZoom: 12}\n    })\n\n    // Method to get sum of clusters\n    const getClusterSum = (cluster) => {\n\n        let sum = 0;\n        \n        supercluster.getLeaves(cluster.id).forEach(point => {\n\n            sum += point.properties.count;\n        })\n\n        return sum;\n\n    }\n\n    return (\n    // Set a height on the map so it will display\n        <ReactMapGL {...viewport} mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\n        onViewportChange={ viewport => { setViewport(viewport)}}\n        maxZoom={12}\n        minZoom={4}\n        ref={mapRef}>\n\n\n            <div className=\"Actions\">\n\n                <a href=\"https://github.com/Rabadunk/COVID19\"><Button variant=\"warning\" ><FaGithub/> github</Button></a>\n                <a href=\"../../data/case.json\" download><Button variant=\"warning\"><FaFileDownload /> json</Button></a>\n                <Button variant=\"warning\"><GoGraph /> graphs</Button>\n                <Button variant=\"warning\" onClick={ () => { setViewport(defaultView)} }> <MdZoomOutMap/> re-center</Button>\n\n            </div>\n\n            {\n                clusters.map(cluster => {\n                    \n                    const [longitude, latitude] = cluster.geometry.coordinates;\n                    const {cluster: isCluster, point_count: pointCount} = cluster.properties;\n\n                    if(isCluster) {\n\n                        let sum = getClusterSum(cluster);\n                        let dimension = 50 + 5 * (sum / points.length)\n\n                        return(\n                            <Marker key={cluster.id} latitude={latitude} longitude={longitude}>\n                                <Button variant=\"warning\" className=\"Case-Marker\" \n                                style={{width: `${dimension}px`, height: `${dimension}px`}}\n                                onClick={ () => {\n                                    const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 9);\n                                    setViewport({\n                                        ...viewport,\n                                        latitude,\n                                        longitude,\n                                        zoom: expansionZoom,\n                                        transitionInterpolator: new FlyToInterpolator({\n                                            speed: 1\n                                        }),\n                                        transitionDuration: \"auto\"\n                                    })\n                                }}>{sum}</Button>\n                            </Marker>\n                        );\n                    }\n\n                    let dimension = 50 + 5 * (cluster.properties.count / points.length)\n\n                    return(\n                        <Marker key={cluster.properties.placeId} latitude={latitude} longitude={longitude}>\n                            <Button variant=\"warning\" className=\"Case-Marker\"\n                                    style={{width: `${dimension}px`, height: `${dimension}px`}}\n                                    onClick={ () => {\n                                        setViewport({\n                                            ...viewport,\n                                            latitude,\n                                            longitude,\n                                            zoom: 9,\n                                            transitionInterpolator: new FlyToInterpolator({\n                                                speed: 1\n                                            }),\n                                            transitionDuration: \"auto\"\n                                        })\n                                    }}>{cluster.properties.count}</Button>\n                        </Marker>\n                    )\n                })\n            }\n\n        </ReactMapGL>\n    );\n}\n","import React, {useState} from 'react';\nimport { Card, Collapse, Button } from \"react-bootstrap\";\nimport { FaTransgender, FaUserInjured } from \"react-icons/fa\";\nimport { GiAges } from \"react-icons/gi\";\nimport './InfoCard.css';\n\nlet InfoCard = ({cases, location, total}) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <div>\n            <Card\n                onClick={() => setOpen(!open)}\n                aria-controls=\"example-collapse-text\"\n                aria-expanded={open}\n\n                className=\"Location-Card\"\n            >\n                {location}\n\n                <Button variant=\"warning\" className=\"Case-Button\">\n                    <FaUserInjured/> {total}\n                </Button>\n\n            </Card>\n            <Collapse in={open}>\n                <div id=\"example-collapse-text\" className=\"Location-Info\">\n                {\n                    cases.map(info => {\n\n                        if(info.DHB === location) {\n\n                            return (\n                                <div className=\"Piece-Of-Info\">\n                                    <p className=\"Details\">{info.Details}</p>\n                                    <div>\n                                        <Button variant=\"warning\" className=\"Button-Wrappers\"># {info.Case}</Button>\n                                        <Button variant=\"warning\" className=\"Button-Wrappers\"><FaTransgender/> {info.Gender}</Button>\n                                        <Button variant=\"warning\" className=\"Button-Wrappers\"><GiAges /> {info.Age}</Button>\n                                    </div>\n\n                                </div>\n\n                            )\n\n                        }\n                    })\n                }\n                </div>\n            </Collapse>\n      </div>\n    );\n  }\n  \n  export default InfoCard;","import React from 'react';\nimport InfoCard from './InfoCard'\n\nfunction Info({cases, locations}) {\n\n    return (\n      <div className=\"Info-Cards\">\n          {\n            locations.map(location => (\n                <InfoCard cases={cases} location={location.DHB} total={location[\"Total cases\"]}/>\n            ))\n          }\n      </div>\n    );\n  }\n  \n  export default Info;","import React from 'react'\nimport CountUp from 'react-countup';\n\n\nimport './Summary.css'\n\nfunction Summary ({totals}) {\n  return (\n    <div className='Summary'>\n\n        <div className=\"Totals\">\n            <h4>Confirmed: {totals.Confirmed}</h4>\n            <h4>Recovered: {totals.Recovered}</h4>\n            <h4>Total: <CountUp end={totals.Total} /></h4>\n        </div>\n\n        <div className=\"Profile\">\n            <p>This is not an official government website. Data for this website is sourced from <a href=\"https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases\">here</a>. For more information view the official government website <a href=\"https://covid19.govt.nz/\">here</a>.</p>\n        </div>\n\n    </div>\n  )\n}\n\nexport default Summary\n","import firebase from 'firebase'\n\nconst config = {\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\nimport Title from './components/Title'\nimport Map from './components/map/Map'\nimport Info from './components/info/Info'\nimport Summary from './components/summary/Summary'\nimport Firebase from './Firebase'\n\nimport StaticCases from './data/cases'\nimport StaticLocations from './data/dhb'\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      Locations: StaticLocations,\n      Cases: StaticCases,\n      Totals: {Confirmed: 0, Recovered: 0, Total: 0}\n    }\n\n  }\n\n  componentDidMount() {\n    const locationsRef = Firebase.database().ref(\"Locations\");\n    locationsRef.once('value').then(value => {\n      this.setState({Locations: value.val()})\n    })\n\n    const casesRef = Firebase.database().ref(\"Cases\");\n    casesRef.once('value').then(value => {\n      this.setState({Cases: value.val()})\n    })\n\n    const totalsRef = Firebase.database().ref(\"Totals\");\n    totalsRef.once('value').then(value => {\n      this.setState({Totals: value.val()[0]})\n    })\n\n\n  }\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <div className=\"Map\">\n          <Map locations={this.state.Locations}/>\n        </div>\n        <div className=\"Info\">\n          <div className=\"Info-Profile\">\n            <Title />\n            <Summary totals={this.state.Totals}/>\n          </div>\n          <Info cases={this.state.Cases} locations={this.state.Locations}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}