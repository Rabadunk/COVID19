{"version":3,"sources":["components/Title.js","components/Map.js","components/info/InfoCard.js","components/info/Info.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Map","useState","latitude","longitude","width","height","zoom","viewport","setViewport","mapJuice","data","forEach","element","a","count","location","locations","mapData","place","push","mapboxApiAccessToken","process","onViewportChange","mapStyle","map","key","lat","lng","Button","variant","InfoCard","open","setOpen","Card","onClick","aria-controls","aria-expanded","Collapse","in","id","info","details","case","gender","age","tempDict","console","log","Info","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"63pBAWiBA,MARjB,WACI,OACE,yBAAKC,UAAU,SACb,gCAAK,kBAAC,IAAD,MAAL,aAAkC,kBAAC,IAAD,MAAlC,O,iECCO,SAASC,IAAO,IAAD,EACMC,mBAAS,CACrCC,UAAW,UACXC,UAAW,WACXC,MAAO,OACPC,OAAQ,QACRC,KAAM,IANgB,mBACnBC,EADmB,KACTC,EADS,KAStBC,EAAW,GAKfC,EAAKC,QAAL,uCAAa,WAAOC,GAAP,SAAAC,EAAA,sDAEND,EAAO,YAAgBH,EACtBA,EAASG,EAAO,UAAcE,OAAS,EAEvCL,EAASG,EAAO,UAAgB,CAACE,MAAO,EAAGC,SAAUC,EAAUJ,EAAO,WALjE,2CAAb,uDAUA,IAAIK,EAAU,GAEd,IAAI,IAAIC,KAAST,EACbQ,EAAQE,KAAK,CACTT,KAAM,CAACQ,EAAOT,EAASS,MAI/B,OAEI,kBAAC,IAAD,iBAAgBX,EAAhB,CAA0Ba,qBAAsBC,gGAChDC,iBAAmB,SAAAf,GAAcC,EAAYD,IAC7CgB,SAAUF,yDAGFJ,EAAQO,KAAI,SAAAN,GAAK,OACb,kBAAC,IAAD,CAAQO,IAAKP,EAAMR,KAAK,GAAIR,SAAUgB,EAAMR,KAAK,GAAGK,SAASW,IAAKvB,UAAWe,EAAMR,KAAK,GAAGK,SAASY,KAEhG,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAU9B,UAAU,eAAemB,EAAMR,KAAK,GAAGI,Y,oCCPxEgB,G,MApCF,SAAC,GAAsB,IAArBf,EAAoB,EAApBA,SAAUL,EAAU,EAAVA,KAAU,EACTT,oBAAS,GADA,mBAC1B8B,EAD0B,KACpBC,EADoB,KAGjC,OACE,6BACM,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAAMF,GAASD,IACxBI,gBAAc,wBACdC,gBAAeL,EAEfhC,UAAU,iBAETgB,GAGL,kBAACsB,EAAA,EAAD,CAAUC,GAAIP,GACV,yBAAKQ,GAAG,wBAAwBxC,UAAU,iBAEtCW,EAAKc,KAAI,SAAAgB,GAAI,OACT,yBAAKzC,UAAU,iBACX,uBAAGA,UAAU,WAAWyC,EAAKC,SAC7B,6BACI,kBAACb,EAAA,EAAD,CAAQC,QAAQ,UAAU9B,UAAU,mBAApC,KAAyDyC,EAAKE,MAC9D,kBAACd,EAAA,EAAD,CAAQC,QAAQ,UAAU9B,UAAU,mBAAkB,kBAAC,IAAD,MAAtD,IAAwEyC,EAAKG,QAC7E,kBAACf,EAAA,EAAD,CAAQC,QAAQ,UAAU9B,UAAU,mBAAkB,kBAAC,IAAD,MAAtD,IAAkEyC,EAAKI,eCzBnG5B,EAAY,GACZ6B,EAAW,GAqBf,IAAI,IAAI3B,KAnBRR,EAAKC,SAAQ,SAAAC,GAENA,EAAO,YAAgBiC,EACtBA,EAASjC,EAAO,UAAcO,KAAK,CAC/BuB,KAAM9B,EAAO,KACbgC,IAAKhC,EAAO,IACZ+B,OAAQ/B,EAAO,OACf6B,QAAS7B,EAAQ,oBAGrBiC,EAASjC,EAAO,UAAc,CAAC,CAC3B8B,KAAM9B,EAAO,KACbgC,IAAKhC,EAAO,IACZ+B,OAAQ/B,EAAO,OACf6B,QAAS7B,EAAQ,uBAKZiC,EACb7B,EAAUG,KACN,CACGJ,SAAUG,EACVR,KAAMmC,EAAS3B,KAK1B4B,QAAQC,IAAI/B,GAeKgC,MAbjB,WAEI,OACE,yBAAKjD,UAAU,cAETiB,EAAUQ,KAAI,SAAAT,GAAQ,OAClB,kBAAC,EAAaA,Q,MCxBfkC,MAdf,WACE,OACE,yBAAKlD,UAAU,OACb,yBAAKA,UAAU,OACb,kBAACC,EAAD,OAEF,yBAAKD,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYmD,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.3c8ad63b.chunk.js","sourcesContent":["import React from 'react';\nimport { FiAlertTriangle } from \"react-icons/fi\";\n\nfunction Title() {\n    return (\n      <div className=\"Title\">\n        <h1> <FiAlertTriangle /> COVID-19 <FiAlertTriangle/> </h1>\n      </div>\n    );\n  }\n  \n  export default Title;","import React, {useState} from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\"\nimport data from '../data/data.json'\nimport locations from '../data/locations.json'\nimport { Button } from \"react-bootstrap\";\n\n\nexport default function Map() {\n    const [viewport, setViewport] = useState({\n        latitude: -36.848461,\n        longitude: 174.763336,\n        width: '100%',\n        height: '100vh',\n        zoom: 8\n    });\n\n    let mapJuice = {\n    }\n\n\n\n    data.forEach(async (element) => {\n    \n        if(element['Location'] in mapJuice) {\n            mapJuice[element['Location']].count += 1;\n        } else {\n            mapJuice[element['Location']] = {count: 1, location: locations[element['Location']]};\n        }\n    \n    });\n\n    let mapData = []\n\n    for(let place in mapJuice) {\n        mapData.push({\n            data: [place, mapJuice[place]]\n        })\n    }\n\n    return (\n    // Set a height on the map so it will display\n        <ReactMapGL {...viewport} mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\n        onViewportChange={ viewport => { setViewport(viewport)}}\n        mapStyle={process.env.REACT_APP_MAP_STYLE}>\n\n            {\n                mapData.map(place => (\n                    <Marker key={place.data[0]} latitude={place.data[1].location.lat} longitude={place.data[1].location.lng}>\n\n                        <Button variant=\"warning\" className=\"Case-Marker\">{place.data[1].count}</Button>\n                    </Marker>\n                ))\n            }\n\n        </ReactMapGL>\n    );\n}\n","import React, {useState} from 'react';\nimport { Card, Collapse, Button } from \"react-bootstrap\";\nimport { FaTransgender } from \"react-icons/fa\";\nimport { GiAges } from \"react-icons/gi\";\nimport './InfoCard.css';\n\nlet InfoCard = ({location, data}) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <div>\n            <Card\n                onClick={() => setOpen(!open)}\n                aria-controls=\"example-collapse-text\"\n                aria-expanded={open}\n\n                className=\"Location-Card\"\n            >\n                {location}\n\n            </Card>\n            <Collapse in={open}>\n                <div id=\"example-collapse-text\" className=\"Location-Info\">\n                {\n                    data.map(info => (\n                        <div className=\"Piece-Of-Info\">\n                            <p className=\"Details\">{info.details}</p>\n                            <div>\n                                <Button variant=\"warning\" className=\"Button-Wrappers\"># {info.case}</Button>\n                                <Button variant=\"warning\" className=\"Button-Wrappers\"><FaTransgender/> {info.gender}</Button>\n                                <Button variant=\"warning\" className=\"Button-Wrappers\"><GiAges /> {info.age}</Button>\n                            </div>\n\n                        </div>\n                    ))\n                }\n                </div>\n            </Collapse>\n      </div>\n    );\n  }\n  \n  export default InfoCard;","import React from 'react';\nimport InfoCard from './InfoCard'\nimport data from '../../data/data.json'\n\n\nlet locations = []\nlet tempDict = {}\n\ndata.forEach(element => {\n\n    if(element['Location'] in tempDict) {\n        tempDict[element['Location']].push({\n            case: element['Case'],\n            age: element['Age'],\n            gender: element['Gender'],\n            details: element['Travel details']\n        })\n    } else {\n        tempDict[element['Location']]=[{\n            case: element['Case'],\n            age: element['Age'],\n            gender: element['Gender'],\n            details: element['Travel details']\n        }]\n    }\n});\n\nfor(let place in tempDict) {\n    locations.push(\n        {\n           location: place,\n           data: tempDict[place]\n        }\n    )\n}\n\nconsole.log(locations);\n\nfunction Info() {\n\n    return (\n      <div className=\"Info-Cards\">\n          {\n            locations.map(location => (\n                <InfoCard {...location} />\n            ))\n          }\n      </div>\n    );\n  }\n  \n  export default Info;","import React from 'react';\nimport Title from './components/Title'\nimport Map from './components/Map'\nimport Info from './components/info/Info'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Map\">\n        <Map />\n      </div>\n      <div className=\"Info\">\n        <Title />\n        <Info />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}