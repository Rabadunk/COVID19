{"version":3,"sources":["components/map/Map.js","App.js","serviceWorker.js","index.js","../node_modules/kepler.gl/dist/localization sync /^/.//.*$"],"names":["Map","reducers","combineReducers","keplerGl","keplerGlReducer","store","createStore","applyMiddleware","taskMiddleware","KeplerMap","dispatch","useDispatch","data","useSwr","a","fetch","response","json","React","useEffect","addDataToMap","datasets","info","label","id","option","centerMap","readOnly","config","mapboxApiAccessToken","process","width","window","innerWidth","height","innerHeight","App","this","setState","visible","display","state","Locations","Cases","Totals","Dates","transitionDuration","className","Spinner","animation","variant","size","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports"],"mappings":"mVAce,SAASA,IAEpB,IAAMC,EAAWC,0BAAgB,CAC7BC,SAAUC,MAGRC,EAAQC,sBAAYL,EAAU,GAAIM,0BAAgBC,mBAExD,OACI,kBAAC,WAAD,CAAUH,MAAOA,GACb,kBAACI,EAAD,OAKZ,SAASA,IACL,IAAMC,EAAWC,wBACVC,EAAQC,YAAO,QAAD,sBAAU,8BAAAC,EAAA,sEACJC,MACnB,+FAFuB,cACrBC,EADqB,gBAKRA,EAASC,OALD,cAKrBL,EALqB,yBAMpBA,GANoB,4CAAxBA,KA6BP,OAnBAM,IAAMC,WAAU,WACTP,GACCF,EAASU,uBAAa,CAClBC,SAAU,CACNC,KAAM,CACFC,MAAO,eACPC,GAAI,SAERZ,QAERa,OAAQ,CACJC,WAAW,EACXC,UAAU,GAEdC,OAAQ,QAGb,CAAClB,EAAUE,IAGV,kBAAC,IAAD,CACAiB,qBAAsBC,gGACtBC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,c,gDCrBRC,E,qKA/BXC,KAAKC,SAAS,CAAEC,SAAS,M,6BAIvBF,KAAKC,SAAS,CAAEC,SAAS,M,+BAI3B,IACIC,EAD+B,MAAxBH,KAAKI,MAAMC,YAAwC,MAApBL,KAAKI,MAAME,QAAqC,MAArBN,KAAKI,MAAMG,QAAqC,MAApBP,KAAKI,MAAMI,QAE5G,kBAAC,IAAD,CAASC,mBAAoB,KAI3B,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QAIQ,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,UAAUH,UAAU,UAAUI,KAAK,OAEnF,OACE,yBAAKJ,UAAU,OACZP,O,GA5BStB,IAAMkC,WCIJC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,qkBEzI5B,IAAIC,EAAM,CACT,KAAM,GACN,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,sBAAuB,IACvB,yBAA0B,IAC1B,UAAW,GACX,aAAc,GACd,OAAQ,IACR,UAAW,IACX,YAAa,IACb,eAAgB,IAChB,OAAQ,IACR,UAAW,KAIZ,SAASC,EAAeC,GACvB,IAAIlD,EAAKmD,EAAsBD,GAC/B,OAAOE,EAAoBpD,GAE5B,SAASmD,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEL,EAAKE,GAAM,CACpC,IAAII,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,EAEP,OAAON,EAAIE,GAEZD,EAAeQ,KAAO,WACrB,OAAOC,OAAOD,KAAKT,IAEpBC,EAAeU,QAAUR,EACzBS,EAAOC,QAAUZ,EACjBA,EAAejD,GAAK,M","file":"static/js/main.b20ea079.chunk.js","sourcesContent":["import React from \"react\";\nimport './Map.css';\n\nimport keplerGlReducer from \"kepler.gl/reducers\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { taskMiddleware } from \"react-palm/tasks\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport KeplerGl from \"kepler.gl\";\nimport { addDataToMap } from \"kepler.gl/actions\";\nimport useSwr from \"swr\";\n\n\n\n\nexport default function Map() {\n\n    const reducers = combineReducers({\n        keplerGl: keplerGlReducer\n    });\n\n    const store = createStore(reducers, {}, applyMiddleware(taskMiddleware));\n\n    return (\n        <Provider store={store}>\n            <KeplerMap />\n        </Provider>\n    );\n}\n\nfunction KeplerMap() {\n    const dispatch = useDispatch();\n    const {data} = useSwr(\"cases\", async () => {\n        const response = await fetch(\n            \"https://gist.githubusercontent.com/Rabadunk/a9bb8282c50856d1168a41d82345d8c6/raw/cases.json\"\n        );\n\n        const data = await response.json();\n        return data\n    });\n  \n\n    React.useEffect(() => {\n        if(data) {\n            dispatch(addDataToMap({\n                datasets: {\n                    info: {\n                        label: \"Cases By DHB\",\n                        id: \"cases\"\n                    },\n                    data\n                },\n            option: {\n                centerMap: true,\n                readOnly: false\n            },\n            config: {}\n            }))\n        }\n    }, [dispatch, data])\n\n    return (\n        <KeplerGl \n        mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        >\n\n        </KeplerGl>\n    )\n}\n","import React from 'react';\nimport Map from './components/map/Map'\n\nimport 'rodal/lib/rodal.css';\nimport './App.css';\nimport { Spinner } from 'react-bootstrap';\nimport FadeIn from 'react-fade-in';\n\nclass App extends React.Component{\n\n\n  show() {\n    this.setState({ visible: true });\n  }\n\n  hide() {\n      this.setState({ visible: false });\n  }\n\n  render(){\n    let oath = this.state.Locations != null ? this.state.Cases != null ? this.state.Totals != null ? this.state.Dates != null ? true : false : false : false : false;\n    let display = oath ?\n    <FadeIn  transitionDuration={1000}>\n\n\n\n      <div className=\"Map\">\n\n        <Map />\n\n      </div>\n\n    </FadeIn> : <Spinner animation=\"border\" variant=\"warning\" className=\"Loading\" size=\"bg\"/>\n\n    return (\n      <div className=\"App\">\n        {display}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./\": 45,\n\t\"./ca\": 607,\n\t\"./ca.js\": 607,\n\t\"./cn\": 608,\n\t\"./cn.js\": 608,\n\t\"./en\": 447,\n\t\"./en.js\": 447,\n\t\"./es\": 609,\n\t\"./es.js\": 609,\n\t\"./fi\": 610,\n\t\"./fi.js\": 610,\n\t\"./formatted-message\": 448,\n\t\"./formatted-message.js\": 448,\n\t\"./index\": 45,\n\t\"./index.js\": 45,\n\t\"./ja\": 611,\n\t\"./ja.js\": 611,\n\t\"./locales\": 130,\n\t\"./locales.js\": 130,\n\t\"./pt\": 612,\n\t\"./pt.js\": 612\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 995;"],"sourceRoot":""}