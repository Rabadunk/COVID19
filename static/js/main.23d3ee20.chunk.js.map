{"version":3,"sources":["components/Title.js","components/AgeChart.js","components/GenderChart.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","labelsArray","Component","getData","tempData","map","label","count","data","forEach","element","Map","useState","latitude","longitude","width","height","zoom","viewport","setViewport","mapJuice","a","location","locations","mapData","place","push","console","log","lat","mapboxApiAccessToken","process","REACT_APP_MAP_KEY","onViewportChange","mapStyle","REACT_APP_MAP_STYLE","key","lng","style","backgroundColor","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qsnBAYiBA,MAVjB,WACI,OACE,yBAAKC,UAAU,SACb,6DACA,+FACA,8I,gDCHFC,EAAc,CAAC,QAAS,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OCAlFA,GDsBiBC,YCtBH,CAAC,IAAK,IAAK,OAAQ,WAEnCC,EAAU,WAEV,IAAMC,EAAWH,EAAYI,KAAK,SAACC,GAE/B,IAAIC,EAAQ,EAQZ,OANAC,EAAKC,SAAQ,SAAAC,GACNA,EAAO,SAAeJ,IACrBC,GAAS,MAIVA,KAMX,MAFc,CAACH,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,K,GAM3CF,Y,gDCtBX,SAASS,IAAO,IAAD,EACMC,mBAAS,CACrCC,UAAW,GACXC,UAAW,IACXC,MAAO,OACPC,OAAQ,QACRC,KAAM,IANgB,mBACnBC,EADmB,KACTC,EADS,KAStBC,EAAW,GAKfZ,EAAKC,QAAL,uCAAa,WAAOC,GAAP,SAAAW,EAAA,sDAENX,EAAO,YAAgBU,EACtBA,EAASV,EAAO,UAAcH,OAAS,EAEvCa,EAASV,EAAO,UAAgB,CAACH,MAAO,EAAGe,SAAUC,EAAUb,EAAO,WALjE,2CAAb,uDAUA,IAAIc,EAAU,GAEd,IAAI,IAAIC,KAASL,EACbI,EAAQE,KAAK,CACTlB,KAAM,CAACiB,EAAOL,EAASK,MAM/B,OAFAE,QAAQC,IAAIJ,EAAQ,GAAGhB,KAAK,GAAGc,SAASO,KAIpC,kBAAC,IAAD,iBAAgBX,EAAhB,CAA0BY,qBAAsBC,2HAAYC,kBAC5DC,iBAAmB,SAAAf,GAAcC,EAAYD,IAC7CgB,SAAUH,2HAAYI,sBAGdX,EAAQnB,KAAI,SAAAoB,GAAK,OACb,kBAAC,IAAD,CAAQW,IAAKX,EAAMjB,KAAK,GAAIK,SAAUY,EAAMjB,KAAK,GAAGc,SAASO,IAAKf,UAAWW,EAAMjB,KAAK,GAAGc,SAASe,KAChG,4BAAQC,MAAO,CAACC,gBAAgB,UAC3Bd,EAAMjB,KAAK,GAAGD,Y,OC9B5BiC,MAbf,WACE,OACE,yBAAKxC,UAAU,OACb,yBAAKA,UAAU,OACb,kBAACW,EAAD,OAEF,yBAAKX,UAAU,QACb,kBAAC,EAAD,SCFYyC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.23d3ee20.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Title() {\n    return (\n      <div className=\"Title\">\n        <h1>COVID-19 Cases In New Zealand</h1>\n        <h2>A better visualisation of the table provided by the government </h2>\n        <a>https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases</a>\n      </div>\n    );\n  }\n  \n  export default Title;","import React, {Component} from \"react\";\nimport {Bar} from 'react-chartjs-2';\nimport data from '../data/data.json'\n\nconst labelsArray = ['Child', 'Teens', '20s', '30s', '40s', '50s', '60s', '70s', '80s', '90s'];\n\nlet getData = () => {\n\n    const newData = labelsArray.map( (label) => {\n\n        let count = 0;\n\n        data.forEach(element => {\n            if(element['Age'] === label) {\n                count += 1\n            }\n        });\n\n        return count;\n\n    })\n\n    return newData;\n\n}\n\nclass AgeChart extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state={\n            chartData: {\n                labels: labelsArray,\n                datasets: [{\n                    label: 'People',\n                    data: getData(),\n                      backgroundColor:[\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)'\n                      ] \n                }]\n            }\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <Bar\n                data={this.state.chartData}\n                width={100}\n                height={400}\n                options={\n                    {\n                        title: {\n                            display: true,\n                            text: 'No. Of infected by age group'\n                        },\n                        responsive:true, \n                        maintainAspectRatio:false\n                    }\n                }\n                />\n            </div>\n        );\n    }\n\n\n\n}\n\nexport default AgeChart;","import React, {Component} from \"react\";\nimport {Bar} from 'react-chartjs-2';\nimport data from '../data/data.json'\n\nconst labelsArray = ['F', 'M', 'Male', 'Female'];\n\nlet getData = () => {\n\n    const tempData = labelsArray.map( (label) => {\n\n        let count = 0;\n\n        data.forEach(element => {\n            if(element['Gender'] === label) {\n                count += 1\n            }\n        });\n\n        return count;\n\n    })\n\n    let newData = [tempData[0] + tempData[3], tempData[1] + tempData[2]]\n\n    return newData;\n\n}\n\nclass GenderChart extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state={\n            chartData: {\n                labels: ['Female', 'Male'],\n                datasets: [{\n                    label: 'People',\n                    data: getData(),\n                      backgroundColor:[\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(255, 206, 86, 1)',\n                      ] \n                }]\n            }\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <Bar\n                data={this.state.chartData}\n                width={100}\n                height={400}\n                options={\n                    {\n                        title: {\n                            display: true,\n                            text: 'No. Of infected by gender'\n                        },\n                        responsive:true, \n                        maintainAspectRatio:false,\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                }\n                            }]\n                        }\n                    }\n                }\n                />\n            </div>\n        );\n    }\n\n\n\n}\n\nexport default GenderChart;","import React, {useState} from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\"\nimport data from '../data/data.json'\nimport locations from '../data/locations.json'\n\n\nexport default function Map() {\n    const [viewport, setViewport] = useState({\n        latitude: -41,\n        longitude: 535,\n        width: '100%',\n        height: '100vh',\n        zoom: 4\n    });\n\n    let mapJuice = {\n    }\n\n\n\n    data.forEach(async (element) => {\n    \n        if(element['Location'] in mapJuice) {\n            mapJuice[element['Location']].count += 1;\n        } else {\n            mapJuice[element['Location']] = {count: 1, location: locations[element['Location']]};\n        }\n    \n    });\n\n    let mapData = []\n\n    for(let place in mapJuice) {\n        mapData.push({\n            data: [place, mapJuice[place]]\n        })\n    }\n\n    console.log(mapData[0].data[1].location.lat);\n\n    return (\n    // Set a height on the map so it will display\n        <ReactMapGL {...viewport} mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\n        onViewportChange={ viewport => { setViewport(viewport)}}\n        mapStyle={process.env.REACT_APP_MAP_STYLE}>\n\n            {\n                mapData.map(place => (\n                    <Marker key={place.data[0]} latitude={place.data[1].location.lat} longitude={place.data[1].location.lng}>\n                        <button style={{backgroundColor:'white'}}>\n                            {place.data[1].count}\n                        </button>\n                    </Marker>\n                ))\n            }\n\n        </ReactMapGL>\n    );\n}\n","import React from 'react';\nimport Title from './components/Title'\nimport AgeChart from './components/AgeChart';\nimport GenderChart from './components/GenderChart';\nimport Map from './components/Map'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Map\">\n        <Map />\n      </div>\n      <div className=\"Info\">\n        <Title />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}