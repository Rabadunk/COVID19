{"version":3,"sources":["components/title/Title.js","components/map/Map.js","components/stats/BarChart.js","components/stats/Stats.js","Firebase.js","App.js","serviceWorker.js","index.js","img/Title.png"],"names":["Title","Map","_ref","locations","show","defaultView","latitude","longitude","width","height","zoom","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","viewport","setViewport","useState","mapRef","useRef","points","map","place","type","properties","cluser","placeId","DHB","count","Total","geometry","coordinates","Longitude","Latitude","bounds","current","getMap","getBounds","toArray","flat","getZoom","console","log","clusters","supercluster","useSupercluster","options","radius","maxZoom","React","createElement","ReactMapGL","Object","assign","mapboxApiAccessToken","process","REACT_APP_MAP_KEY","mapStyle","REACT_APP_MAP_STYLE","onViewportChange","minZoom","ref","cluster","isCluster","sum","getLeaves","id","forEach","point","getClusterSum","dimension","length","Marker","key","offsetLeft","offsetTop","Button","variant","className","style","concat","onClick","expansionZoom","Math","min","getClusterExpansionZoom","Component","Stats","config","apiKey","REACT_APP_FIREBASE_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGE_SENDER_ID","appId","REACT_APP_FIREBASE_ID","measurementId","REACT_APP_MEASUREMENT_ID","firebase","initializeApp","App","constructor","props","super","this","state","Locations","Cases","Totals","Dates","visible","componentDidMount","Firebase","database","once","then","value","setState","val","hide","render","display","FadeIn","bind","Spinner","animation","size","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.fc6cf584.chunk.js","sourcesContent":["import React from 'react'\nimport TitleImage from '../../img/Title.png';\nimport './Title.css'\n\nfunction Title () {\n  return (\n    <div className='Title'>\n      <h1>\n        <img src={TitleImage} alt=\"COVID-19 VISUALISER\"/>\n      </h1>\n    </div>\n  )\n}\n\nexport default Title\n","import React, {useState, useRef} from \"react\";\nimport ReactMapGL, { Marker, FlyToInterpolator } from \"react-map-gl\";\nimport './Map.css';\n\n\nimport { MdZoomOutMap } from \"react-icons/md\";\nimport { FaGithub, FaFileDownload} from \"react-icons/fa\";\nimport { GoGraph } from \"react-icons/go\";\nimport { Button } from \"react-bootstrap\";\nimport useSupercluster from \"use-supercluster\";\n\n\nexport default function Map({locations, show}) {\n    const boundaries = [\n        [153.23263188324853, -48.24568667774788],\n        [192.21550971326383, -33.99607772732675]\n    ]\n\n    const defaultView = {\n        latitude: -41.51128245580759,\n        longitude: 172.72407079826075,\n        width: '100vw',\n        height: '100vh',\n        zoom: 5.2839,\n        transitionInterpolator: new FlyToInterpolator({\n            speed: 1\n        }),\n        transitionDuration: \"auto\",     \n    }\n\n    const [viewport, setViewport] = useState(defaultView);\n\n    const mapRef = useRef()\n\n\n    // Clustering\n    // Format for clusters\n    const points = locations.map( place => ({\n        type: \"Feature\",\n        properties: {\n            cluser: false,\n            placeId: place.DHB,\n            count: place.Total\n        },\n        geometry: {\n            type: \"Point\",\n            coordinates: [place.Longitude, place.Latitude]\n        }\n    }));\n\n    // Get map bounds\n    const bounds= mapRef.current ? mapRef.current.getMap().getBounds().toArray().flat() : null;\n    const zoom= mapRef.current ? mapRef.current.getMap().getZoom() : null;\n\n\n    console.log(bounds, viewport.zoom);\n\n    // Get clusters\n    const {clusters, supercluster} = useSupercluster({\n        points,\n        zoom: viewport.zoom,\n        bounds,\n        options: { radius: 30, maxZoom: 12}\n    })\n\n    // Method to get sum of clusters\n    const getClusterSum = (cluster) => {\n\n        let sum = 0;\n        \n        supercluster.getLeaves(cluster.id).forEach(point => {\n\n            sum += point.properties.count;\n        })\n\n        return sum;\n\n    }\n\n\n\n    return (\n    // Set a height on the map so it will display\n        <ReactMapGL {...viewport} \n        mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\n        mapStyle={process.env.REACT_APP_MAP_STYLE}\n        onViewportChange={ viewport => { setViewport(viewport)}}\n        maxZoom={12}\n        minZoom={4}\n        ref={mapRef}>\n\n            {\n                clusters.map(cluster => {\n                    \n                    const [longitude, latitude] = cluster.geometry.coordinates;\n                    const {cluster: isCluster} = cluster.properties;\n\n                    if(isCluster) {\n\n                        let sum = getClusterSum(cluster);\n                        let dimension = 30 + (sum / points.length)\n\n                        return(\n                            <Marker key={cluster.id} latitude={latitude} longitude={longitude} offsetLeft={-1*dimension/2} offsetTop={-1*dimension/2}>\n                                <Button variant=\"warning\" className=\"Case-Marker\" \n                                style={{width: `${dimension}px`, height: `${dimension}px`}}\n                                onClick={ () => {\n                                    const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 12);\n                                    setViewport({\n                                        ...viewport,\n                                        latitude,\n                                        longitude,\n                                        zoom: expansionZoom,\n                                        transitionInterpolator: new FlyToInterpolator({\n                                            speed: 1\n                                        }),\n                                        transitionDuration: \"auto\"\n                                    })\n                                }}>{sum}</Button>\n                            </Marker>\n                        );\n                    }\n\n                    let dimension = 30 + 2 *  (cluster.properties.count / points.length)\n\n                    return(\n                        <Marker key={cluster.properties.placeId} latitude={latitude} longitude={longitude} offsetLeft={-1*dimension/2} offsetTop={-1*dimension/2}>\n                            <Button variant=\"warning\" className=\"Case-Marker\"\n                                    style={{width: `${dimension}px`, height: `${dimension}px`}}\n                                    onClick={ () => {\n                                        setViewport({\n                                            ...viewport,\n                                            latitude,\n                                            longitude,\n                                            zoom: 12,\n                                            transitionInterpolator: new FlyToInterpolator({\n                                                speed: 1\n                                            }),\n                                            transitionDuration: \"auto\"\n                                        })\n                                    }}>{cluster.properties.count}</Button>\n                        </Marker>\n                    )\n                })\n            }\n\n        </ReactMapGL>\n    );\n}\n","import React from 'react';\nimport {Bar} from 'react-chartjs-2';\nimport {Form} from 'react-bootstrap';\n\nclass BarChart extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chartData: null,\n\n        }\n\n        this.labels = this.props.dates.map(date => {return date.Date})\n        this.data = this.props.dates.map(date => {return date.Sum})\n      \n        this.chartData = {\n          labels: this.labels,\n          datasets: [\n            {\n              label: \"Cases\",\n              data: this.data,\n              backgroundColor: \"rgba(253, 219, 83, 0.8)\"\n            }\n          ]\n        }\n      \n        this.options = {\n          responsive: true,\n          maintainAspectRatio: true,\n        }\n    }\n\n\n  render() {\n    return (\n        <div>\n            <div className=\"Chart\">\n                <Bar data={this.chartData} options={this.options}/>\n                <Form>\n\n                    <div key='default-checkbox' className=\"mb-3\">\n                        <Form.Check \n                            type='checkbox'\n                            id='default-checkbox'\n                            label='dates'\n                        />\n\n                        <Form.Check\n                            type='checkbox' \n                            label='default-checkbox' \n                            id='default-checkbox' \n                        />\n                    </div>\n\n                </Form>\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default BarChart","import React from 'react';\nimport './Graphs.css';\nimport { Tabs, Tab} from \"react-bootstrap\";\nimport LocationCases from './LocationCases';\nimport DateCases from './DateCases';\nimport StatsSummary from './StatsSummary';\nimport Custom from './Custom';\n\nlet Stats = ({locations, totals, dates}) => {\n\n  return (\n    <div className=\"Stats\">\n      <Tabs defaultActiveKey=\"stats\" id=\"uncontrolled-tab-example\">\n        <Tab eventKey=\"stats\" title=\"Stats\" className=\"Tab\">\n          <StatsSummary totals={totals} />\n          <DateCases dates={dates} />\n          <LocationCases locations={locations}/>\n        </Tab>\n        <Tab eventKey=\"custom\" title=\"Custom\" disabled>\n          <Custom locations={locations} totals={totals} dates={dates}/>\n        </Tab>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default Stats","import firebase from 'firebase'\n\nconst config = {\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\nimport Rodal from 'rodal';\nimport Title from './components/title/Title'\nimport Map from './components/map/Map'\nimport Info from './components/info/Info'\nimport Summary from './components/summary/Summary'\nimport Stats from './components/stats/Stats'\nimport Firebase from './Firebase'\n\nimport 'rodal/lib/rodal.css';\nimport './App.css';\nimport { Spinner } from 'react-bootstrap';\nimport FadeIn from 'react-fade-in';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      Locations: null,\n      Cases: null,\n      Totals: null,\n      Dates: null,\n      visible: false\n    }\n\n  }\n\n  componentDidMount() {\n    const locationsRef = Firebase.database().ref(\"Locations\");\n    locationsRef.once('value').then(value => {\n      this.setState({Locations: value.val()})\n    })\n\n    const casesRef = Firebase.database().ref(\"Cases\");\n    casesRef.once('value').then(value => {\n      this.setState({Cases: value.val()})\n    })\n\n    const totalsRef = Firebase.database().ref(\"Totals\");\n    totalsRef.once('value').then(value => {\n      this.setState({Totals: value.val()[0]})\n    })\n\n    const datesRef = Firebase.database().ref(\"Dates\");\n    datesRef.once('value').then(value => {\n      this.setState({Dates: value.val()})\n    })\n\n  }\n\n  show() {\n    this.setState({ visible: true });\n  }\n\n  hide() {\n      this.setState({ visible: false });\n  }\n\n  render(){\n    let oath = this.state.Locations != null ? this.state.Cases != null ? this.state.Totals != null ? this.state.Dates != null ? true : false : false : false : false;\n    let display = oath ?\n    <FadeIn  transitionDuration={1000}>\n\n\n\n      <div className=\"Map\">\n\n        <Map locations={this.state.Locations} show={this.show.bind(this)}/>\n\n      </div>\n\n    </FadeIn> : <Spinner animation=\"border\" variant=\"warning\" className=\"Loading\" size=\"bg\"/>\n\n    return (\n      <div className=\"App\">\n        {display}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Title.23336c2c.png\";"],"sourceRoot":""}